buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        // https://mvnrepository.com/artifact/com.netflix.nebula/gradle-ospackage-plugin
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:11.3.0'

    }
}


plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.netflix.nebula.rpm' version '11.3.0'
    id 'war'
}

group = 'org.freeshr'
version = '0.1'
sourceCompatibility = 17
targetCompatibility = 17
ext.mainClassName = "org.freeshr.identity.launch.Application"

repositories {
    mavenLocal()
    mavenCentral()
}

idea {
    project {
        jdkName = '17'
        languageLevel = '17'
    }
}

jar {
    archiveBaseName = 'identity-service'
    archiveVersion = '0.1.0'
}

wrapper {
    gradleVersion = '8.1.1'
}



war {
    from sourceSets.main.resources

    manifest {
        attributes('Main-Class': mainClassName)
    }
}

dependencies {
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.2'
    testImplementation 'com.jayway.restassured:rest-assured:2.9.0'
    testImplementation 'org.mockito:mockito-core:5.3.1'
    testImplementation 'com.github.tomakehurst:wiremock:2.27.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

private Properties loadConfig() {
    Properties properties = new Properties()
    properties.load(new FileInputStream(file("${projectDir}/env/local.properties")));
    properties
}

task assembly(dependsOn: 'build') {
    doLast {
        new File("${buildDir}/etc/").mkdir();
    }
}

task exportProperties(dependsOn: 'assembly') {

    doLast {
        PrintStream output = new PrintStream(new FileOutputStream(file("${buildDir}/etc/identity-server")));
        Properties properties = loadConfig()
        properties.each { prop, val ->
            output.println("export " + prop + "=" + val)
        }
    }
}

task dist(dependsOn: 'exportProperties', type: Rpm) {

        packageName = 'identity-server'
        version = '0.1.0'
        release = project.hasProperty('release') ? project.release : '1'
        arch = NOARCH
        os = LINUX

        into '/opt/identity-server'

        postInstall = file('scripts/utils/postInstall.sh')
        preUninstall = file('scripts/utils/preUninstall.sh')
        postUninstall = file('scripts/utils/postUninstall.sh')

        from("${buildDir}/etc") {
            fileMode = 0755
            into 'etc'
        }

        from("scripts/rpm") {
            fileMode = 0755
            exclude 'placeholder'
            into 'bin'
        }

        from("${buildDir}/libs") {
            fileMode = 0755
            into 'lib'
        }

        from("scripts/rpm") {
            fileMode = 0755
            exclude 'identity-server'
            into 'var'
        }

}